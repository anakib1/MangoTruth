// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDetectors(t *testing.T) {
	t.Parallel()

	query := Detectors()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDetectorsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Detectors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDetectorsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Detectors().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Detectors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDetectorsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DetectorSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Detectors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDetectorsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DetectorExists(ctx, tx, o.Name)
	if err != nil {
		t.Errorf("Unable to check if Detector exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DetectorExists to return true, but got false.")
	}
}

func testDetectorsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	detectorFound, err := FindDetector(ctx, tx, o.Name)
	if err != nil {
		t.Error(err)
	}

	if detectorFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDetectorsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Detectors().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDetectorsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Detectors().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDetectorsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	detectorOne := &Detector{}
	detectorTwo := &Detector{}
	if err = randomize.Struct(seed, detectorOne, detectorDBTypes, false, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}
	if err = randomize.Struct(seed, detectorTwo, detectorDBTypes, false, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = detectorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = detectorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Detectors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDetectorsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	detectorOne := &Detector{}
	detectorTwo := &Detector{}
	if err = randomize.Struct(seed, detectorOne, detectorDBTypes, false, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}
	if err = randomize.Struct(seed, detectorTwo, detectorDBTypes, false, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = detectorOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = detectorTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Detectors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func detectorBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Detector) error {
	*o = Detector{}
	return nil
}

func detectorAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Detector) error {
	*o = Detector{}
	return nil
}

func detectorAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Detector) error {
	*o = Detector{}
	return nil
}

func detectorBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Detector) error {
	*o = Detector{}
	return nil
}

func detectorAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Detector) error {
	*o = Detector{}
	return nil
}

func detectorBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Detector) error {
	*o = Detector{}
	return nil
}

func detectorAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Detector) error {
	*o = Detector{}
	return nil
}

func detectorBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Detector) error {
	*o = Detector{}
	return nil
}

func detectorAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Detector) error {
	*o = Detector{}
	return nil
}

func testDetectorsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Detector{}
	o := &Detector{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, detectorDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Detector object: %s", err)
	}

	AddDetectorHook(boil.BeforeInsertHook, detectorBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	detectorBeforeInsertHooks = []DetectorHook{}

	AddDetectorHook(boil.AfterInsertHook, detectorAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	detectorAfterInsertHooks = []DetectorHook{}

	AddDetectorHook(boil.AfterSelectHook, detectorAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	detectorAfterSelectHooks = []DetectorHook{}

	AddDetectorHook(boil.BeforeUpdateHook, detectorBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	detectorBeforeUpdateHooks = []DetectorHook{}

	AddDetectorHook(boil.AfterUpdateHook, detectorAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	detectorAfterUpdateHooks = []DetectorHook{}

	AddDetectorHook(boil.BeforeDeleteHook, detectorBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	detectorBeforeDeleteHooks = []DetectorHook{}

	AddDetectorHook(boil.AfterDeleteHook, detectorAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	detectorAfterDeleteHooks = []DetectorHook{}

	AddDetectorHook(boil.BeforeUpsertHook, detectorBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	detectorBeforeUpsertHooks = []DetectorHook{}

	AddDetectorHook(boil.AfterUpsertHook, detectorAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	detectorAfterUpsertHooks = []DetectorHook{}
}

func testDetectorsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Detectors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDetectorsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(detectorColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Detectors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDetectorsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDetectorsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DetectorSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDetectorsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Detectors().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	detectorDBTypes = map[string]string{`Name`: `character varying`, `Classpath`: `character varying`, `RunID`: `uuid`}
	_               = bytes.MinRead
)

func testDetectorsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(detectorPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(detectorAllColumns) == len(detectorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Detectors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDetectorsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(detectorAllColumns) == len(detectorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Detector{}
	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Detectors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, detectorDBTypes, true, detectorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(detectorAllColumns, detectorPrimaryKeyColumns) {
		fields = detectorAllColumns
	} else {
		fields = strmangle.SetComplement(
			detectorAllColumns,
			detectorPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DetectorSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDetectorsUpsert(t *testing.T) {
	t.Parallel()

	if len(detectorAllColumns) == len(detectorPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Detector{}
	if err = randomize.Struct(seed, &o, detectorDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Detector: %s", err)
	}

	count, err := Detectors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, detectorDBTypes, false, detectorPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Detector struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Detector: %s", err)
	}

	count, err = Detectors().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
