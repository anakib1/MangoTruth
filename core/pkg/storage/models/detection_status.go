// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DetectionStatus is an object representing the database table.
type DetectionStatus struct {
	RequestID string     `boil:"request_id" json:"request_id" toml:"request_id" yaml:"request_id"`
	Status    string     `boil:"status" json:"status" toml:"status" yaml:"status"`
	Data      null.Bytes `boil:"data" json:"data,omitempty" toml:"data" yaml:"data,omitempty"`

	R *detectionStatusR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L detectionStatusL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DetectionStatusColumns = struct {
	RequestID string
	Status    string
	Data      string
}{
	RequestID: "request_id",
	Status:    "status",
	Data:      "data",
}

var DetectionStatusTableColumns = struct {
	RequestID string
	Status    string
	Data      string
}{
	RequestID: "detection_status.request_id",
	Status:    "detection_status.status",
	Data:      "detection_status.data",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DetectionStatusWhere = struct {
	RequestID whereHelperstring
	Status    whereHelperstring
	Data      whereHelpernull_Bytes
}{
	RequestID: whereHelperstring{field: "\"detection_status\".\"request_id\""},
	Status:    whereHelperstring{field: "\"detection_status\".\"status\""},
	Data:      whereHelpernull_Bytes{field: "\"detection_status\".\"data\""},
}

// DetectionStatusRels is where relationship names are stored.
var DetectionStatusRels = struct {
}{}

// detectionStatusR is where relationships are stored.
type detectionStatusR struct {
}

// NewStruct creates a new relationship struct
func (*detectionStatusR) NewStruct() *detectionStatusR {
	return &detectionStatusR{}
}

// detectionStatusL is where Load methods for each relationship are stored.
type detectionStatusL struct{}

var (
	detectionStatusAllColumns            = []string{"request_id", "status", "data"}
	detectionStatusColumnsWithoutDefault = []string{"request_id", "status"}
	detectionStatusColumnsWithDefault    = []string{"data"}
	detectionStatusPrimaryKeyColumns     = []string{"request_id"}
	detectionStatusGeneratedColumns      = []string{}
)

type (
	// DetectionStatusSlice is an alias for a slice of pointers to DetectionStatus.
	// This should almost always be used instead of []DetectionStatus.
	DetectionStatusSlice []*DetectionStatus
	// DetectionStatusHook is the signature for custom DetectionStatus hook methods
	DetectionStatusHook func(context.Context, boil.ContextExecutor, *DetectionStatus) error

	detectionStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	detectionStatusType                 = reflect.TypeOf(&DetectionStatus{})
	detectionStatusMapping              = queries.MakeStructMapping(detectionStatusType)
	detectionStatusPrimaryKeyMapping, _ = queries.BindMapping(detectionStatusType, detectionStatusMapping, detectionStatusPrimaryKeyColumns)
	detectionStatusInsertCacheMut       sync.RWMutex
	detectionStatusInsertCache          = make(map[string]insertCache)
	detectionStatusUpdateCacheMut       sync.RWMutex
	detectionStatusUpdateCache          = make(map[string]updateCache)
	detectionStatusUpsertCacheMut       sync.RWMutex
	detectionStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var detectionStatusAfterSelectMu sync.Mutex
var detectionStatusAfterSelectHooks []DetectionStatusHook

var detectionStatusBeforeInsertMu sync.Mutex
var detectionStatusBeforeInsertHooks []DetectionStatusHook
var detectionStatusAfterInsertMu sync.Mutex
var detectionStatusAfterInsertHooks []DetectionStatusHook

var detectionStatusBeforeUpdateMu sync.Mutex
var detectionStatusBeforeUpdateHooks []DetectionStatusHook
var detectionStatusAfterUpdateMu sync.Mutex
var detectionStatusAfterUpdateHooks []DetectionStatusHook

var detectionStatusBeforeDeleteMu sync.Mutex
var detectionStatusBeforeDeleteHooks []DetectionStatusHook
var detectionStatusAfterDeleteMu sync.Mutex
var detectionStatusAfterDeleteHooks []DetectionStatusHook

var detectionStatusBeforeUpsertMu sync.Mutex
var detectionStatusBeforeUpsertHooks []DetectionStatusHook
var detectionStatusAfterUpsertMu sync.Mutex
var detectionStatusAfterUpsertHooks []DetectionStatusHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DetectionStatus) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detectionStatusAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DetectionStatus) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detectionStatusBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DetectionStatus) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detectionStatusAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DetectionStatus) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detectionStatusBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DetectionStatus) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detectionStatusAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DetectionStatus) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detectionStatusBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DetectionStatus) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detectionStatusAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DetectionStatus) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detectionStatusBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DetectionStatus) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detectionStatusAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDetectionStatusHook registers your hook function for all future operations.
func AddDetectionStatusHook(hookPoint boil.HookPoint, detectionStatusHook DetectionStatusHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		detectionStatusAfterSelectMu.Lock()
		detectionStatusAfterSelectHooks = append(detectionStatusAfterSelectHooks, detectionStatusHook)
		detectionStatusAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		detectionStatusBeforeInsertMu.Lock()
		detectionStatusBeforeInsertHooks = append(detectionStatusBeforeInsertHooks, detectionStatusHook)
		detectionStatusBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		detectionStatusAfterInsertMu.Lock()
		detectionStatusAfterInsertHooks = append(detectionStatusAfterInsertHooks, detectionStatusHook)
		detectionStatusAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		detectionStatusBeforeUpdateMu.Lock()
		detectionStatusBeforeUpdateHooks = append(detectionStatusBeforeUpdateHooks, detectionStatusHook)
		detectionStatusBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		detectionStatusAfterUpdateMu.Lock()
		detectionStatusAfterUpdateHooks = append(detectionStatusAfterUpdateHooks, detectionStatusHook)
		detectionStatusAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		detectionStatusBeforeDeleteMu.Lock()
		detectionStatusBeforeDeleteHooks = append(detectionStatusBeforeDeleteHooks, detectionStatusHook)
		detectionStatusBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		detectionStatusAfterDeleteMu.Lock()
		detectionStatusAfterDeleteHooks = append(detectionStatusAfterDeleteHooks, detectionStatusHook)
		detectionStatusAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		detectionStatusBeforeUpsertMu.Lock()
		detectionStatusBeforeUpsertHooks = append(detectionStatusBeforeUpsertHooks, detectionStatusHook)
		detectionStatusBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		detectionStatusAfterUpsertMu.Lock()
		detectionStatusAfterUpsertHooks = append(detectionStatusAfterUpsertHooks, detectionStatusHook)
		detectionStatusAfterUpsertMu.Unlock()
	}
}

// One returns a single detectionStatus record from the query.
func (q detectionStatusQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DetectionStatus, error) {
	o := &DetectionStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for detection_status")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DetectionStatus records from the query.
func (q detectionStatusQuery) All(ctx context.Context, exec boil.ContextExecutor) (DetectionStatusSlice, error) {
	var o []*DetectionStatus

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DetectionStatus slice")
	}

	if len(detectionStatusAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DetectionStatus records in the query.
func (q detectionStatusQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count detection_status rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q detectionStatusQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if detection_status exists")
	}

	return count > 0, nil
}

// DetectionStatuses retrieves all the records using an executor.
func DetectionStatuses(mods ...qm.QueryMod) detectionStatusQuery {
	mods = append(mods, qm.From("\"detection_status\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"detection_status\".*"})
	}

	return detectionStatusQuery{q}
}

// FindDetectionStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDetectionStatus(ctx context.Context, exec boil.ContextExecutor, requestID string, selectCols ...string) (*DetectionStatus, error) {
	detectionStatusObj := &DetectionStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"detection_status\" where \"request_id\"=$1", sel,
	)

	q := queries.Raw(query, requestID)

	err := q.Bind(ctx, exec, detectionStatusObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from detection_status")
	}

	if err = detectionStatusObj.doAfterSelectHooks(ctx, exec); err != nil {
		return detectionStatusObj, err
	}

	return detectionStatusObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DetectionStatus) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no detection_status provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(detectionStatusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	detectionStatusInsertCacheMut.RLock()
	cache, cached := detectionStatusInsertCache[key]
	detectionStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			detectionStatusAllColumns,
			detectionStatusColumnsWithDefault,
			detectionStatusColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(detectionStatusType, detectionStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(detectionStatusType, detectionStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"detection_status\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"detection_status\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into detection_status")
	}

	if !cached {
		detectionStatusInsertCacheMut.Lock()
		detectionStatusInsertCache[key] = cache
		detectionStatusInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DetectionStatus.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DetectionStatus) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	detectionStatusUpdateCacheMut.RLock()
	cache, cached := detectionStatusUpdateCache[key]
	detectionStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			detectionStatusAllColumns,
			detectionStatusPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update detection_status, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"detection_status\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, detectionStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(detectionStatusType, detectionStatusMapping, append(wl, detectionStatusPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update detection_status row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for detection_status")
	}

	if !cached {
		detectionStatusUpdateCacheMut.Lock()
		detectionStatusUpdateCache[key] = cache
		detectionStatusUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q detectionStatusQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for detection_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for detection_status")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DetectionStatusSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), detectionStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"detection_status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, detectionStatusPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in detectionStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all detectionStatus")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DetectionStatus) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no detection_status provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(detectionStatusColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	detectionStatusUpsertCacheMut.RLock()
	cache, cached := detectionStatusUpsertCache[key]
	detectionStatusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			detectionStatusAllColumns,
			detectionStatusColumnsWithDefault,
			detectionStatusColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			detectionStatusAllColumns,
			detectionStatusPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert detection_status, could not build update column list")
		}

		ret := strmangle.SetComplement(detectionStatusAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(detectionStatusPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert detection_status, could not build conflict column list")
			}

			conflict = make([]string, len(detectionStatusPrimaryKeyColumns))
			copy(conflict, detectionStatusPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"detection_status\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(detectionStatusType, detectionStatusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(detectionStatusType, detectionStatusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert detection_status")
	}

	if !cached {
		detectionStatusUpsertCacheMut.Lock()
		detectionStatusUpsertCache[key] = cache
		detectionStatusUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DetectionStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DetectionStatus) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DetectionStatus provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), detectionStatusPrimaryKeyMapping)
	sql := "DELETE FROM \"detection_status\" WHERE \"request_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from detection_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for detection_status")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q detectionStatusQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no detectionStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from detection_status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for detection_status")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DetectionStatusSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(detectionStatusBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), detectionStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"detection_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, detectionStatusPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from detectionStatus slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for detection_status")
	}

	if len(detectionStatusAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DetectionStatus) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDetectionStatus(ctx, exec, o.RequestID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DetectionStatusSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DetectionStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), detectionStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"detection_status\".* FROM \"detection_status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, detectionStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DetectionStatusSlice")
	}

	*o = slice

	return nil
}

// DetectionStatusExists checks if the DetectionStatus row exists.
func DetectionStatusExists(ctx context.Context, exec boil.ContextExecutor, requestID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"detection_status\" where \"request_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, requestID)
	}
	row := exec.QueryRowContext(ctx, sql, requestID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if detection_status exists")
	}

	return exists, nil
}

// Exists checks if the DetectionStatus row exists.
func (o *DetectionStatus) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DetectionStatusExists(ctx, exec, o.RequestID)
}
