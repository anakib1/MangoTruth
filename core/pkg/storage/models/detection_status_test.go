// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDetectionStatuses(t *testing.T) {
	t.Parallel()

	query := DetectionStatuses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDetectionStatusesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DetectionStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDetectionStatusesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DetectionStatuses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DetectionStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDetectionStatusesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DetectionStatusSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DetectionStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDetectionStatusesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DetectionStatusExists(ctx, tx, o.RequestID)
	if err != nil {
		t.Errorf("Unable to check if DetectionStatus exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DetectionStatusExists to return true, but got false.")
	}
}

func testDetectionStatusesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	detectionStatusFound, err := FindDetectionStatus(ctx, tx, o.RequestID)
	if err != nil {
		t.Error(err)
	}

	if detectionStatusFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDetectionStatusesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DetectionStatuses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDetectionStatusesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DetectionStatuses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDetectionStatusesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	detectionStatusOne := &DetectionStatus{}
	detectionStatusTwo := &DetectionStatus{}
	if err = randomize.Struct(seed, detectionStatusOne, detectionStatusDBTypes, false, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, detectionStatusTwo, detectionStatusDBTypes, false, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = detectionStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = detectionStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DetectionStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDetectionStatusesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	detectionStatusOne := &DetectionStatus{}
	detectionStatusTwo := &DetectionStatus{}
	if err = randomize.Struct(seed, detectionStatusOne, detectionStatusDBTypes, false, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, detectionStatusTwo, detectionStatusDBTypes, false, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = detectionStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = detectionStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DetectionStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func detectionStatusBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DetectionStatus) error {
	*o = DetectionStatus{}
	return nil
}

func detectionStatusAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DetectionStatus) error {
	*o = DetectionStatus{}
	return nil
}

func detectionStatusAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DetectionStatus) error {
	*o = DetectionStatus{}
	return nil
}

func detectionStatusBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DetectionStatus) error {
	*o = DetectionStatus{}
	return nil
}

func detectionStatusAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DetectionStatus) error {
	*o = DetectionStatus{}
	return nil
}

func detectionStatusBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DetectionStatus) error {
	*o = DetectionStatus{}
	return nil
}

func detectionStatusAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DetectionStatus) error {
	*o = DetectionStatus{}
	return nil
}

func detectionStatusBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DetectionStatus) error {
	*o = DetectionStatus{}
	return nil
}

func detectionStatusAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DetectionStatus) error {
	*o = DetectionStatus{}
	return nil
}

func testDetectionStatusesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DetectionStatus{}
	o := &DetectionStatus{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DetectionStatus object: %s", err)
	}

	AddDetectionStatusHook(boil.BeforeInsertHook, detectionStatusBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	detectionStatusBeforeInsertHooks = []DetectionStatusHook{}

	AddDetectionStatusHook(boil.AfterInsertHook, detectionStatusAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	detectionStatusAfterInsertHooks = []DetectionStatusHook{}

	AddDetectionStatusHook(boil.AfterSelectHook, detectionStatusAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	detectionStatusAfterSelectHooks = []DetectionStatusHook{}

	AddDetectionStatusHook(boil.BeforeUpdateHook, detectionStatusBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	detectionStatusBeforeUpdateHooks = []DetectionStatusHook{}

	AddDetectionStatusHook(boil.AfterUpdateHook, detectionStatusAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	detectionStatusAfterUpdateHooks = []DetectionStatusHook{}

	AddDetectionStatusHook(boil.BeforeDeleteHook, detectionStatusBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	detectionStatusBeforeDeleteHooks = []DetectionStatusHook{}

	AddDetectionStatusHook(boil.AfterDeleteHook, detectionStatusAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	detectionStatusAfterDeleteHooks = []DetectionStatusHook{}

	AddDetectionStatusHook(boil.BeforeUpsertHook, detectionStatusBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	detectionStatusBeforeUpsertHooks = []DetectionStatusHook{}

	AddDetectionStatusHook(boil.AfterUpsertHook, detectionStatusAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	detectionStatusAfterUpsertHooks = []DetectionStatusHook{}
}

func testDetectionStatusesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DetectionStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDetectionStatusesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(detectionStatusColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DetectionStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDetectionStatusesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDetectionStatusesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DetectionStatusSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDetectionStatusesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DetectionStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	detectionStatusDBTypes = map[string]string{`RequestID`: `uuid`, `Status`: `enum.status('UNKNOWN','PENDING','SUCCESS','FAILURE')`, `Data`: `bytea`}
	_                      = bytes.MinRead
)

func testDetectionStatusesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(detectionStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(detectionStatusAllColumns) == len(detectionStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DetectionStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDetectionStatusesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(detectionStatusAllColumns) == len(detectionStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DetectionStatus{}
	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DetectionStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, detectionStatusDBTypes, true, detectionStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(detectionStatusAllColumns, detectionStatusPrimaryKeyColumns) {
		fields = detectionStatusAllColumns
	} else {
		fields = strmangle.SetComplement(
			detectionStatusAllColumns,
			detectionStatusPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DetectionStatusSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDetectionStatusesUpsert(t *testing.T) {
	t.Parallel()

	if len(detectionStatusAllColumns) == len(detectionStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DetectionStatus{}
	if err = randomize.Struct(seed, &o, detectionStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DetectionStatus: %s", err)
	}

	count, err := DetectionStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, detectionStatusDBTypes, false, detectionStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DetectionStatus struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DetectionStatus: %s", err)
	}

	count, err = DetectionStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
