// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/detection": {
            "get": {
                "description": "Fetch the detection status and verdict by requestId.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get the detection status",
                "parameters": [
                    {
                        "description": "Detection Query Request",
                        "name": "detectionQuery",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/modules.DetectionQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/modules.DetectionStatus"
                        }
                    },
                    "400": {
                        "description": "Missing requestId parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Request not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Submit a detection request for processing.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Submit a detection request",
                "parameters": [
                    {
                        "description": "Detection Request",
                        "name": "detectionRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/modules.DetectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/modules.DetectionStatus"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/detection/mass": {
            "get": {
                "description": "Fetch the detection statuses for multiple request IDs. Optionally filter results by userId.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get multiple detection statuses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Optional userId to filter detection statuses",
                        "name": "userId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/modules.DetectionStatus"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "modules.DetectionQuery": {
            "type": "object",
            "required": [
                "request_id"
            ],
            "properties": {
                "request_id": {
                    "description": "RequestID is the unique identifier for the detection request\nrequired: true\nexample: f47ac10b-58cc-4372-a567-0e02b2c3d479",
                    "type": "string",
                    "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
                }
            }
        },
        "modules.DetectionRequest": {
            "description": "DetectionRequest contains the request UUID and content to be analyzed",
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content to be analyzed for detection\nrequired: true\nexample: This is the content to be analyzed.",
                    "type": "string",
                    "example": "This is the content to be analyzed."
                },
                "detector_name": {
                    "description": "DetectorName of detector to make inference on\nrequired: true\nexample: ghostbuster",
                    "type": "string",
                    "example": "ghostbuster"
                }
            }
        },
        "modules.DetectionStatus": {
            "description": "DetectionStatus includes the status of the request and the verdict",
            "type": "object",
            "required": [
                "request_id"
            ],
            "properties": {
                "request_id": {
                    "description": "RequestID is the unique identifier for the detection request\nrequired: true\nexample: f47ac10b-58cc-4372-a567-0e02b2c3d479",
                    "type": "string",
                    "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
                },
                "status": {
                    "description": "Status is the current status of the detection request\nEnum: \"REJECTED\" \"FAILED\" \"IN_PROGRESS\" \"FINISHED\"\nrequired: true\nexample: IN_PROGRESS",
                    "type": "string",
                    "example": "IN_PROGRESS"
                },
                "verdict": {
                    "description": "Verdict is the result of the detection (optional)\nIt can be null if no verdict is available yet",
                    "allOf": [
                        {
                            "$ref": "#/definitions/modules.Verdict"
                        }
                    ]
                }
            }
        },
        "modules.Label": {
            "type": "object",
            "properties": {
                "label": {
                    "description": "Label name (e.g., \"plagiarism\" or \"ai-generated\")\nexample: plagiarism",
                    "type": "string",
                    "example": "plagiarism"
                },
                "probability": {
                    "description": "Probability of the label being true\nexample: 0.85",
                    "type": "number",
                    "example": 0.85
                }
            }
        },
        "modules.Verdict": {
            "type": "object",
            "properties": {
                "labels": {
                    "description": "Labels with associated probabilities",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/modules.Label"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
